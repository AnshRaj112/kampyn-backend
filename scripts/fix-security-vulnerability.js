#!/usr/bin/env node

/**
 * Security Vulnerability Fix Script
 * 
 * This script updates dependencies to fix CVE-2025-56200
 * validator.js URL validation bypass vulnerability.
 * 
 * @author KAMPYN Backend Team
 * @version 1.0.0
 * @since October 2025
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('ðŸ”’ KAMPYN Security Vulnerability Fix');
console.log('=====================================');
console.log('');

// Colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = {
  info: (msg) => console.log(`${colors.blue}â„¹${colors.reset} ${msg}`),
  success: (msg) => console.log(`${colors.green}âœ“${colors.reset} ${msg}`),
  warning: (msg) => console.log(`${colors.yellow}âš ${colors.reset} ${msg}`),
  error: (msg) => console.log(`${colors.red}âœ—${colors.reset} ${msg}`)
};

async function runCommand(command, description) {
  try {
    log.info(`Running: ${description}`);
    const output = execSync(command, { 
      encoding: 'utf8', 
      stdio: 'pipe',
      cwd: process.cwd()
    });
    return { success: true, output };
  } catch (error) {
    return { success: false, error: error.message, output: error.stdout || error.stderr };
  }
}

async function checkCurrentVersions() {
  log.info('Checking current package versions...');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    console.log('Current Dependencies:');
    console.log(`  express-validator: ${packageJson.dependencies['express-validator'] || 'not found'}`);
    
    // Check package-lock.json for actual installed versions
    if (fs.existsSync('package-lock.json')) {
      const lockContent = fs.readFileSync('package-lock.json', 'utf8');
      const validatorMatch = lockContent.match(/"validator":\s*"([^"]+)"/);
      if (validatorMatch) {
        console.log(`  validator: ${validatorMatch[1]} (from express-validator)`);
        
        if (validatorMatch[1].startsWith('13.12.0') || 
            validatorMatch[1].startsWith('13.13.') || 
            validatorMatch[1].startsWith('13.14.') || 
            validatorMatch[1].startsWith('13.15.') && !validatorMatch[1].startsWith('13.15.16')) {
          log.error(`VULNERABLE: validator ${validatorMatch[1]} is affected by CVE-2025-56200`);
          return false;
        } else {
          log.success(`SECURE: validator ${validatorMatch[1]} is not vulnerable`);
          return true;
        }
      }
    }
    
    return false;
  } catch (error) {
    log.error(`Error checking versions: ${error.message}`);
    return false;
  }
}

async function updateDependencies() {
  log.info('Updating dependencies to fix security vulnerability...');
  
  // First, try to update express-validator
  const updateResult = await runCommand(
    'npm update express-validator',
    'Updating express-validator to latest version'
  );
  
  if (updateResult.success) {
    log.success('express-validator updated successfully');
  } else {
    log.warning(`express-validator update failed: ${updateResult.error}`);
  }
  
  // Force reinstall to ensure overrides are applied
  const installResult = await runCommand(
    'npm install',
    'Reinstalling dependencies with security overrides'
  );
  
  if (installResult.success) {
    log.success('Dependencies reinstalled with security overrides');
  } else {
    log.error(`Dependency reinstall failed: ${installResult.error}`);
    return false;
  }
  
  return true;
}

async function runSecurityAudit() {
  log.info('Running security audit...');
  
  const auditResult = await runCommand(
    'npm audit',
    'Checking for security vulnerabilities'
  );
  
  if (auditResult.success) {
    if (auditResult.output.includes('found 0 vulnerabilities')) {
      log.success('No security vulnerabilities found');
      return true;
    } else {
      log.warning('Security vulnerabilities found:');
      console.log(auditResult.output);
      return false;
    }
  } else {
    log.error(`Security audit failed: ${auditResult.error}`);
    return false;
  }
}

async function runSecurityTests() {
  log.info('Running security tests...');
  
  try {
    // Import and run our security tests
    const { runSecurityTests } = require('../utils/secureUrlValidation');
    const results = runSecurityTests();
    
    console.log('');
    console.log('Security Test Results:');
    console.log(`  Passed: ${results.passed}`);
    console.log(`  Failed: ${results.failed}`);
    console.log(`  Total: ${results.tests.length}`);
    
    if (results.failed > 0) {
      log.error('Some security tests failed:');
      const failedTests = results.tests.filter(test => !test.passed);
      failedTests.forEach(test => {
        console.log(`    ${test.index}. ${test.url}`);
        console.log(`       Expected: ${test.expected}, Got: ${test.actual}`);
        console.log(`       Error: ${test.error}`);
      });
      return false;
    } else {
      log.success('All security tests passed');
      return true;
    }
  } catch (error) {
    log.error(`Security tests failed: ${error.message}`);
    return false;
  }
}

async function generateSecurityReport() {
  log.info('Generating security report...');
  
  const report = {
    timestamp: new Date().toISOString(),
    vulnerability: 'CVE-2025-56200',
    description: 'validator.js URL validation bypass vulnerability',
    fixApplied: true,
    tests: {
      dependencyUpdate: false,
      securityAudit: false,
      securityTests: false
    }
  };
  
  // Check if dependencies were updated
  const versionsCheck = await checkCurrentVersions();
  report.tests.dependencyUpdate = versionsCheck;
  
  // Run security audit
  const auditCheck = await runSecurityAudit();
  report.tests.securityAudit = auditCheck;
  
  // Run security tests
  const testsCheck = await runSecurityTests();
  report.tests.securityTests = testsCheck;
  
  // Write report
  const reportPath = path.join(__dirname, '..', 'security-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  log.success(`Security report generated: ${reportPath}`);
  
  return report;
}

async function main() {
  console.log('Starting security vulnerability fix process...');
  console.log('');
  
  // Step 1: Check current versions
  const isSecure = await checkCurrentVersions();
  
  if (isSecure) {
    log.success('Dependencies are already secure!');
  } else {
    // Step 2: Update dependencies
    const updateSuccess = await updateDependencies();
    if (!updateSuccess) {
      log.error('Failed to update dependencies');
      process.exit(1);
    }
    
    // Step 3: Verify fix
    const fixVerified = await checkCurrentVersions();
    if (!fixVerified) {
      log.error('Security fix verification failed');
      process.exit(1);
    }
  }
  
  // Step 4: Run security audit
  await runSecurityAudit();
  
  // Step 5: Run security tests
  await runSecurityTests();
  
  // Step 6: Generate report
  const report = await generateSecurityReport();
  
  console.log('');
  console.log('ðŸ”’ Security Vulnerability Fix Complete');
  console.log('======================================');
  console.log('');
  console.log('Summary:');
  console.log(`  âœ“ Vulnerability: ${report.vulnerability}`);
  console.log(`  âœ“ Fix Applied: ${report.fixApplied}`);
  console.log(`  âœ“ Dependencies Updated: ${report.tests.dependencyUpdate}`);
  console.log(`  âœ“ Security Audit: ${report.tests.securityAudit}`);
  console.log(`  âœ“ Security Tests: ${report.tests.securityTests}`);
  console.log('');
  
  if (report.tests.dependencyUpdate && report.tests.securityAudit && report.tests.securityTests) {
    log.success('All security checks passed! The vulnerability has been fixed.');
    process.exit(0);
  } else {
    log.error('Some security checks failed. Please review the report.');
    process.exit(1);
  }
}

// Handle errors
process.on('uncaughtException', (error) => {
  log.error(`Uncaught exception: ${error.message}`);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  log.error(`Unhandled rejection at: ${promise}, reason: ${reason}`);
  process.exit(1);
});

// Run the script
if (require.main === module) {
  main().catch((error) => {
    log.error(`Script failed: ${error.message}`);
    process.exit(1);
  });
}

module.exports = {
  checkCurrentVersions,
  updateDependencies,
  runSecurityAudit,
  runSecurityTests,
  generateSecurityReport
};
